{"version":3,"sources":["components/Results.js","App.js","hooks/useTimer.js","hooks/useWords.js","reportWebVitals.js","index.js"],"names":["Results","timeElapsed","correctAnswers","WPM","WPS","className","style","color","Math","round","App","React","fetchData","setFetchData","isActive","setIsActive","isFinished","setIsFinished","setCorrectAnswers","answer","setAnswer","setTimeElapsed","setTimeout","useTimer","words","setWords","fetch","url","then","res","json","data","useWords","handleTimer","e","target","id","handleCorrectAnswer","splice","length","getColor","i","marginBottom","opacity","fontSize","split","map","letter","index","type","value","onChange","margin","onClick","href","rel","textDecoration","position","bottom","xmlns","width","height","fill","class","viewBox","d","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3878d7b.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nexport default function Results({ timeElapsed, correctAnswers }) {\r\n  const WPM = (correctAnswers / timeElapsed) * 60\r\n  const WPS = correctAnswers / timeElapsed\r\n\r\n  return (\r\n    <div className='resultsContainer' style={{ color: 'white' }}>\r\n      <h3>Your score</h3>\r\n      <p>{`${timeElapsed} seconds elapsed`}</p>\r\n      <p>{`${correctAnswers} ${\r\n        correctAnswers === 1 ? 'word' : 'words'\r\n      } completed`}</p>\r\n      <p>{`${Math.round(WPM * 100) / 100} words per minute`}</p>\r\n      <p>{`${Math.round(WPS * 100) / 100} words per second`}</p>\r\n    </div>\r\n  )\r\n}\r\n","import * as React from 'react'\r\nimport Results from './components/Results'\r\nimport useWords from './hooks/useWords'\r\nimport useTimer from './hooks/useTimer'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [fetchData, setFetchData] = React.useState(true)\r\n  const [isActive, setIsActive] = React.useState(false)\r\n  const [isFinished, setIsFinished] = React.useState(false)\r\n  const [correctAnswers, setCorrectAnswers] = React.useState(0)\r\n  const [answer, setAnswer] = React.useState('')\r\n  const { timeElapsed, setTimeElapsed } = useTimer(isActive) || null\r\n  const words = useWords(fetchData) || null\r\n  const index = 0\r\n\r\n  React.useEffect(() => {\r\n    if (answer === words[index]) {\r\n      handleCorrectAnswer()\r\n    }\r\n  }, [answer])\r\n\r\n  function handleTimer(e) {\r\n    setIsActive(!isActive)\r\n    if (e.target.id === 'startBtn') {\r\n      setCorrectAnswers(0)\r\n      setTimeElapsed(0)\r\n      handleCorrectAnswer()\r\n    }\r\n    if (e.target.id === 'stopBtn') {\r\n      setIsFinished(true)\r\n    }\r\n  }\r\n\r\n  function handleCorrectAnswer() {\r\n    setAnswer('')\r\n    setCorrectAnswers(correctAnswers + 1)\r\n    words.splice(index, 1)\r\n    setFetchData(words.length <= 1)\r\n  }\r\n\r\n  function getColor(i) {\r\n    if (!answer[i]) return\r\n    return words[index][i] === answer[i] ? 'green' : 'red'\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className='App'\r\n      style={{\r\n        color: 'white',\r\n      }}\r\n    >\r\n      <h1 className='title' style={{ marginBottom: '100px' }}>\r\n        Speed Writing Test\r\n      </h1>\r\n      {isActive ? (\r\n        <div>\r\n          <p>{`Time elapsed: ${timeElapsed || 0}`}</p>\r\n          <p>{`Score: ${correctAnswers}`}</p>\r\n          <p style={{ opacity: '0.2', fontSize: '1rem' }}>{words[1] || ''}</p>\r\n          {words[index] ? (\r\n            words[index]\r\n              .split('')\r\n              .map((letter, index) => (\r\n                <span style={{ color: getColor(index), fontSize: '3rem' }}>\r\n                  {letter}\r\n                </span>\r\n              ))\r\n          ) : (\r\n            <p>...</p>\r\n          )}\r\n          <form>\r\n            <input\r\n              type='text'\r\n              value={answer}\r\n              onChange={e => setAnswer(e.target.value)}\r\n              style={{ margin: '10px' }}\r\n            ></input>\r\n          </form>\r\n          <button\r\n            className='myBtn'\r\n            id='stopBtn'\r\n            type='button'\r\n            onClick={handleTimer}\r\n          >\r\n            stop\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {isFinished ? (\r\n            <Results\r\n              timeElapsed={timeElapsed}\r\n              correctAnswers={correctAnswers}\r\n            />\r\n          ) : (\r\n            ''\r\n          )}\r\n          <button\r\n            className='myBtn'\r\n            id='startBtn'\r\n            type='button'\r\n            onClick={handleTimer}\r\n          >\r\n            start\r\n          </button>\r\n        </div>\r\n      )}\r\n      <a\r\n        href='https://github.com/lucasersson/challenges/tree/main/speedwritingtest'\r\n        target='_blank'\r\n        rel='noreferrer'\r\n        style={{ textDecoration: 'none', position: 'fixed', bottom: '5px' }}\r\n      >\r\n        <svg\r\n          xmlns='http://www.w3.org/2000/svg'\r\n          width='24'\r\n          height='24'\r\n          fill='white'\r\n          class='bi bi-github'\r\n          viewBox='0 0 16 16'\r\n        >\r\n          <path d='M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z' />\r\n        </svg>\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import * as React from 'react'\r\n\r\nexport default function useTimer(isActive) {\r\n  const [timeElapsed, setTimeElapsed] = React.useState(0)\r\n\r\n  React.useEffect(() => {\r\n    if (isActive) {\r\n      setTimeout(() => {\r\n        setTimeElapsed(timeElapsed + 1)\r\n      }, 1000)\r\n    }\r\n  }, [isActive, timeElapsed])\r\n\r\n  return { timeElapsed, setTimeElapsed }\r\n}\r\n","import * as React from 'react'\r\n\r\nexport default function useWords(fetchData) {\r\n  const [words, setWords] = React.useState([])\r\n  const url = 'https://random-word-api.herokuapp.com/word?number='\r\n  const totalWords = 30\r\n\r\n  React.useEffect(() => {\r\n    if (fetchData) {\r\n      fetch(url + totalWords + '&swear=0')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          setWords(data)\r\n        })\r\n    }\r\n  }, [fetchData])\r\n\r\n  return words\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}